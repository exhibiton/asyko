# CircleCI 2.0 config.

defaults: &defaults
  shell: /bin/bash --login
  working_directory: ~/repo
  docker:
    - image: circleci/node:lts-browsers 
      environment: # environment variables for primary container
        PGHOST: 127.0.0.1
        PGUSER: postgres
    - image: circleci/postgres:9.5-alpine # database image
      environment: # environment variables for database
        LC_ALL: en_US.UTF-8
        LANG: en_US.UTF-8
        POSTGRES_USER: postgres
        POSTGRES_DB: test
        POSTGRES_PASSWORD: ""

version: 2
jobs:
  build-frontend:
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      TZ: '/usr/share/zoneinfo/America/New_York'
    docker:
      # specify the version you desire here
      - image: circleci/node:lts-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run: cd frontend && yarn install
  push-image-gcr:
    <<: *defaults
    docker:
      - image: google/cloud-sdk
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate with Google Cloud APIs
          command: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run:
          name: Set default Project
          command: gcloud --quiet config set project $GKE_PROJECT_NAME
      - run:
          name: Set default Zone
          command: gcloud --quiet config set compute/zone $ZONE
      - run:
          name: Get K8s cluster logins
          command: gcloud --quiet container clusters get-credentials $GKE_CLUSTER_NAME
      - run:
          name: Authenticate with K8s container registry
          command: gcloud auth configure-docker
      - run:
          name: Login to container registry
          command: gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
      - run:
          name: Change directory
          command: cd frontend
      - run:
          name: Build API container image
          command: docker build -t gcr.io/$GKE_PROJECT_NAME/$APPLICATION_NAME:latest -f frontend/Dockerfile frontend/
      - run:
          name: Push API image
          command: docker push gcr.io/$GKE_PROJECT_NAME/$APPLICATION_NAME:latest
      - run:
          name: Get SHA # will be useful in debugging deployment issues
          command: echo "SHA $CIRCLE_SHA1"

  deploy-frontend:
    <<: *defaults
    docker:
      - image: google/cloud-sdk
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - run:
          name: Authenticate with Google Cloud APIs
          command: echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      - run:
          name: Set default Project
          command: gcloud --quiet config set project $GKE_PROJECT_NAME
      - run:
          name: Set default Zone
          command: gcloud --quiet config set compute/zone $ZONE
      - run:
          name: Get K8s cluster logins
          command: gcloud --quiet container clusters get-credentials $GKE_CLUSTER_NAME
      - run:
          name: Set default cluster
          command: gcloud --quiet config set container/cluster $GKE_CLUSTER_NAME
      - run:
          name: Authenticate with K8s container registry
          command: gcloud auth configure-docker
      - run:
          name: Apply project settings to deploy.yaml
          command: sed -i "s/APPLICATION_NAME/${APPLICATION_NAME}/g" kubernetes/deploy.yaml && sed -i "s/GKE_PROJECT_NAME/${GKE_PROJECT_NAME}/g" kubernetes/deploy.yaml
      - run:
          name: Apply latest kube yaml changes
          command: kubectl apply -f kubernetes/deploy.yaml
      - run:
          name: Check Rollout status
          command: kubectl rollout status deployments $APPLICATION_NAME --request-timeout="180"

workflows:
  version: 2
  deploy-k8s:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: master
      - push-image-gcr:
          requires:
           - build-frontend
          filters:
            branches:
              only: master
      - deploy-frontend:
          requires:
            - build-frontend
            - push-image-gcr
          filters:
            branches:
              only: master
